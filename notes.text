In this project I will be using React framework to build my Personal Website

____________________________________________________________________________

============ CREATE APP =============
 * npx create-react-app name-of-app     # creates  
 * npm start                            # Starts the development server.
 * npm run build                        # Bundles the app into static files for production.
 * npm test                             # Starts the test runner.
 * npm run eject                        # Removes this tool and copies build dependencies, configuration files ...
                                        # ... and scripts into the app directory. If you do this, you canâ€™t go back!

 Remeber to:
 *  cd react-portfolio                  # change directory to react-portfolio folder 
    npm start
                                      

============ DEPENDECIES ============
    * npm install --save react-router-dom  # Install react-router-dom dependency 
    * npm install --save react-icons       # Install react-icons (for icons)
    * npm install --save react-typist      # Install react-typist (typing effect)
    * npm install   react-router-dom       # Install react-router-dom (for routing)
    * npm install --save react-scroll      # Install react-scroll (for smooth scrolling)
    

============ FOLDER STRUCTURE ================

    * src Folder:
        *Apps.js (main file)        # Parent file for the app (contains all the components)
        *index.js (main file)       # Main file for the app (contains the ReactDOM.render) Parent file for the App.js (contains all the components)
        *index.css (main file)      # Main file for the app (contains the css for the app)
        *assets Folder:
            *images Folder:
                *images files
            *fonts Folder (optional):
                *fonts files


        * routes                  # Folder for all routes OR pages of the website
            * About                   # About route 
            * Contact                 # Contact route
            * Home                    # Home route
                imports;
                    React from 'react';
                    Navbar from '../components/Navbar';
                    Hero from '../components/Hero';

            * Projects                # Projects route

    * components folder             # Folder for all components
            * Home.js                # Home component
             - Home.css               # Home component css stylling
            * About.js               # About component
                - About.css              # About component css stylling
            * Contact.js             # Contact component
                - Contact.css            # Contact component css stylling
            * Projects.js            # Projects component
                - Projects.css           # Projects component css stylling
            * Navbar.js              # Navbar component
                - Navbar.css             # Navbar component css stylling
            * Footer.js              # Footer component
                - Footer.css             # Footer component css stylling
            * ScrollToTop.js         # ScrollToTop component
                - ScrollToTop.css        # ScrollToTop component css stylling
          

    * public Folder:
        * index.html                  # This is the main html file that will be rendered in the browser 
        * favicon.ico                 # This is the favicon that will be rendered in the browser tab
        * manifest.json               # manifest.json tells the browser about your web application and how it should behave when 'installed' on the user's mobile device or desktop.
        * robots.txt                  # The robots.txt file tells search engine crawlers which pages or files the crawler can or can't request from your site.
    * package.json                    # This is the main file that will be rendered in the index.html file
    * package-lock.json               # This is the main file that will be rendered in the index.html file
    * README.md                       # This is the main file that will be rendered in the index.html file
    * .gitignore                      # This is the main file that will be rendered in the index.html file

    =============TIPS FOR QUICK CREATION OF FUNCTIONAL COMPONENTS AND CLASS COMPONENTS ====================
    IMPORTANT:
    (es7 react/redux/react-native/... snippets) extension must be installed in order to use the shortcuts below
    
    Inside the components folder create a new file with the name of the component you want to create

    * rcc + tab = class component
    * rfc + tab = functional component or 
    * rafce + tab = functional component with export
    * rce + tab = class component with export default at the end or
    * rfe + tab = functional component with export default at the end


    eg. rcc + tab = class component 
    import React, { Component } from 'react'

    export default class componentName extends Component {
        render() {
            return (
                <div>
                    
                </div>
            )
        }
    }

==========================================================================================================
PROPS, STATE, HOOKS AND CONTEXT
==========================================================================================================

NOTE: props definition and workflow:
definition of props: props is a special keyword in React, which stands for properties and is being used for passing data from one component to another.
1. The props are passed from the parent component to the child component like this: <ChildComponent name="John" age="25" />
2. The child component receives the props as an argument like this: const ChildComponent = (props) => { ... }
3. The props are used in the child component like this: <h1>My name is {props.name} and I am {props.age} years old</h1>
4. props are immutable, they cannot be changed in the child component
5. props are used to pass data from one component to another
6. props is an object that contains all the properties that are passed to the component
7. props do not require the arrow function syntax, they can be used like this: const ChildComponent = props => { ... }
8. to replace the above code with a props example, we can use the following code:
import React from "react";
import "./Hero.css";
 
const Hero = props => {
  return (
    <div className="hero">
      <h1>Hi, I'm {props.name}</h1>
      <p>I'm a {props.profession}</p>
    </div>
  )
} OR

import React from "react";
import "./Hero.css";

class Hero extends React.Component {
  render() {
    return (
      <div className="hero">
        <h1>Hi, I'm {this.props.name}</h1>
        <p>I'm a {this.props.profession}</p>
      </div>
    )
  }
} OR

import React from "react";
import "./Hero.css";
import { Component } from "react";

class Hero extends Component {
  render() {
    return (
      <div className="hero">
        <h1>Hi, I'm {this.props.name}</h1>
        <p>I'm a {this.props.profession}</p>
      </div>
    )
  }
}

export default Hero

NOTE: state definition and workflow:
definition of state: state is a special keyword in React, which is used to create a component state. The state object is where you store property values that belongs to the component. When the state object changes, the component re-renders.
1. The state is initialized in the constructor of the component like this: this.state = { name: "John", age: 25 }
2. The state is accessed in the component like this: <h1>My name is {this.state.name} and I am {this.state.age} years old</h1>
3. The state is changed in the component like this: this.setState({ name: "John", age: 25 })
4. state is mutable, it can be changed in the component
5. state is used to store data that belongs to the component
6. state is an object that contains all the properties that belongs to the component
7. state requires the arrow function syntax, it cannot be used like this: const ChildComponent = props => { ... }
8. to replace the above code with a state example, we can use the following code:
import React from "react";
import "./Hero.css";

class Hero extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: "John",
      age: 25
    };
  }
  render() {
    return (
      <div className="hero">
        <h1>Hi, I'm {this.state.name}</h1>
        <p>I'm a {this.state.age} years old</p>
      </div>
    )
  }
}

NOTE: React Hooks:
definition of
1. The state is initialized in the constructor of the component like this: this.state = { name: "John", age: 25 }
2. The state is accessed in the component like this: <h1>My name is {this.state.name} and I am {this.state.age} years old</h1>
3. The state is changed in the component like this: this.setState({ name: "John", age: 25 })
4. state is mutable, it can be changed in the component
5. state is used to store data that belongs to the component
6. state is an object that contains all the properties that belongs to the component
7. state requires the arrow function syntax, it cannot be used like this: const ChildComponent = props => { ... }
8. to replace the above code with a state example, we can use the following code:
import React from "react";
import "./Hero.css";

class Hero extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: "John",
      age: 25
    };
  }
  render() {
    return (
      <div className="hero">
        <h1>Hi, I'm {this.state.name}</h1>
        <p>I'm a {this.state.age} years old</p>
      </div>
    )
  }
}

https://donavworo.github.io/Quiz-WebApp/index.html  Quiz



https://github.com/DonAvworo/ReadMe-File-Generator/settings Read me gen


